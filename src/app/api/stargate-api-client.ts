//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class Client {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "/stargate-api";
    }

    /**
     * @return OK
     */
    byPerson(personId: number): Observable<void> {
        let url_ = this.baseUrl + "/v1/duty/by-person/{personId}";
        if (personId === undefined || personId === null)
            throw new Error("The parameter 'personId' must be defined.");
        url_ = url_.replace("{personId}", encodeURIComponent("" + personId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processByPerson(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processByPerson(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processByPerson(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    person(personId: number, body: CreateAstronautDutyRequest | undefined): Observable<void> {
        let url_ = this.baseUrl + "/v1/duty/person/{personId}";
        if (personId === undefined || personId === null)
            throw new Error("The parameter 'personId' must be defined.");
        url_ = url_.replace("{personId}", encodeURIComponent("" + personId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPerson(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPerson(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processPerson(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param name (optional) 
     * @param sortBy (optional) 
     * @param desc (optional) 
     * @param page (optional) 
     * @param pageSize (optional) 
     * @return OK
     */
    personGET(name: string | undefined, sortBy: string | undefined, desc: boolean | undefined, page: number | undefined, pageSize: number | undefined): Observable<GetPeopleResponse> {
        let url_ = this.baseUrl + "/v1/Person?";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        if (sortBy === null)
            throw new Error("The parameter 'sortBy' cannot be null.");
        else if (sortBy !== undefined)
            url_ += "sortBy=" + encodeURIComponent("" + sortBy) + "&";
        if (desc === null)
            throw new Error("The parameter 'desc' cannot be null.");
        else if (desc !== undefined)
            url_ += "desc=" + encodeURIComponent("" + desc) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPersonGET(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPersonGET(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetPeopleResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetPeopleResponse>;
        }));
    }

    protected processPersonGET(response: HttpResponseBase): Observable<GetPeopleResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetPeopleResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    personPOST(body: CreatePersonCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/v1/Person";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPersonPOST(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPersonPOST(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processPersonPOST(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    personGET2(id: number): Observable<void> {
        let url_ = this.baseUrl + "/v1/Person/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPersonGET2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPersonGET2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processPersonGET2(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    personPUT(id: number, body: UpdatePersonCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/v1/Person/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPersonPUT(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPersonPUT(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processPersonPUT(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    personDELETE(id: number): Observable<void> {
        let url_ = this.baseUrl + "/v1/Person/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPersonDELETE(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPersonDELETE(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processPersonDELETE(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class CreateAstronautDutyRequest implements ICreateAstronautDutyRequest {
    rank?: string | undefined;
    dutyTitle?: string | undefined;
    dutyStartDate?: Date;
    dutyEndDate?: Date | undefined;

    constructor(data?: ICreateAstronautDutyRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.rank = _data["rank"];
            this.dutyTitle = _data["dutyTitle"];
            this.dutyStartDate = _data["dutyStartDate"] ? new Date(_data["dutyStartDate"].toString()) : <any>undefined;
            this.dutyEndDate = _data["dutyEndDate"] ? new Date(_data["dutyEndDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateAstronautDutyRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateAstronautDutyRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rank"] = this.rank;
        data["dutyTitle"] = this.dutyTitle;
        data["dutyStartDate"] = this.dutyStartDate ? this.dutyStartDate.toISOString() : <any>undefined;
        data["dutyEndDate"] = this.dutyEndDate ? this.dutyEndDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface ICreateAstronautDutyRequest {
    rank?: string | undefined;
    dutyTitle?: string | undefined;
    dutyStartDate?: Date;
    dutyEndDate?: Date | undefined;
}

export class CreatePersonCommand implements ICreatePersonCommand {
    name?: string | undefined;
    currentRank?: string | undefined;
    currentDutyTitle?: string | undefined;
    careerStartDate?: Date | undefined;
    careerEndDate?: Date | undefined;

    constructor(data?: ICreatePersonCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.currentRank = _data["currentRank"];
            this.currentDutyTitle = _data["currentDutyTitle"];
            this.careerStartDate = _data["careerStartDate"] ? new Date(_data["careerStartDate"].toString()) : <any>undefined;
            this.careerEndDate = _data["careerEndDate"] ? new Date(_data["careerEndDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreatePersonCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePersonCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["currentRank"] = this.currentRank;
        data["currentDutyTitle"] = this.currentDutyTitle;
        data["careerStartDate"] = this.careerStartDate ? this.careerStartDate.toISOString() : <any>undefined;
        data["careerEndDate"] = this.careerEndDate ? this.careerEndDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface ICreatePersonCommand {
    name?: string | undefined;
    currentRank?: string | undefined;
    currentDutyTitle?: string | undefined;
    careerStartDate?: Date | undefined;
    careerEndDate?: Date | undefined;
}

export class GetPeopleResponse implements IGetPeopleResponse {
    success?: boolean;
    message?: string | undefined;
    responseCode?: number;
    data?: PersonAstronautDto[] | undefined;
    page?: number;
    pageSize?: number;
    totalItems?: number;
    readonly totalPages?: number;

    constructor(data?: IGetPeopleResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.message = _data["message"];
            this.responseCode = _data["responseCode"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PersonAstronautDto.fromJS(item));
            }
            this.page = _data["page"];
            this.pageSize = _data["pageSize"];
            this.totalItems = _data["totalItems"];
            (<any>this).totalPages = _data["totalPages"];
        }
    }

    static fromJS(data: any): GetPeopleResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetPeopleResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["message"] = this.message;
        data["responseCode"] = this.responseCode;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item ? item.toJSON() : <any>undefined);
        }
        data["page"] = this.page;
        data["pageSize"] = this.pageSize;
        data["totalItems"] = this.totalItems;
        data["totalPages"] = this.totalPages;
        return data;
    }
}

export interface IGetPeopleResponse {
    success?: boolean;
    message?: string | undefined;
    responseCode?: number;
    data?: PersonAstronautDto[] | undefined;
    page?: number;
    pageSize?: number;
    totalItems?: number;
    totalPages?: number;
}

export class PersonAstronautDto implements IPersonAstronautDto {
    id?: number;
    name?: string | undefined;
    readonly isAstronaut?: boolean;
    currentRank?: string | undefined;
    currentDutyTitle?: string | undefined;
    careerStartDate?: Date | undefined;
    careerEndDate?: Date | undefined;

    constructor(data?: IPersonAstronautDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            (<any>this).isAstronaut = _data["isAstronaut"];
            this.currentRank = _data["currentRank"];
            this.currentDutyTitle = _data["currentDutyTitle"];
            this.careerStartDate = _data["careerStartDate"] ? new Date(_data["careerStartDate"].toString()) : <any>undefined;
            this.careerEndDate = _data["careerEndDate"] ? new Date(_data["careerEndDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PersonAstronautDto {
        data = typeof data === 'object' ? data : {};
        let result = new PersonAstronautDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["isAstronaut"] = this.isAstronaut;
        data["currentRank"] = this.currentRank;
        data["currentDutyTitle"] = this.currentDutyTitle;
        data["careerStartDate"] = this.careerStartDate ? this.careerStartDate.toISOString() : <any>undefined;
        data["careerEndDate"] = this.careerEndDate ? this.careerEndDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IPersonAstronautDto {
    id?: number;
    name?: string | undefined;
    isAstronaut?: boolean;
    currentRank?: string | undefined;
    currentDutyTitle?: string | undefined;
    careerStartDate?: Date | undefined;
    careerEndDate?: Date | undefined;
}

export class UpdatePersonCommand implements IUpdatePersonCommand {
    name?: string | undefined;
    currentRank?: string | undefined;
    currentDutyTitle?: string | undefined;
    careerStartDate?: Date | undefined;
    careerEndDate?: Date | undefined;

    constructor(data?: IUpdatePersonCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.currentRank = _data["currentRank"];
            this.currentDutyTitle = _data["currentDutyTitle"];
            this.careerStartDate = _data["careerStartDate"] ? new Date(_data["careerStartDate"].toString()) : <any>undefined;
            this.careerEndDate = _data["careerEndDate"] ? new Date(_data["careerEndDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdatePersonCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePersonCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["currentRank"] = this.currentRank;
        data["currentDutyTitle"] = this.currentDutyTitle;
        data["careerStartDate"] = this.careerStartDate ? this.careerStartDate.toISOString() : <any>undefined;
        data["careerEndDate"] = this.careerEndDate ? this.careerEndDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IUpdatePersonCommand {
    name?: string | undefined;
    currentRank?: string | undefined;
    currentDutyTitle?: string | undefined;
    careerStartDate?: Date | undefined;
    careerEndDate?: Date | undefined;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}